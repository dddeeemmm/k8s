---

- name: check initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_check_initialized


- block:

    - name: init first master
      shell: kubeadm init --control-plane-endpoint "kube-apiserver.{{ domain }}:6443" --pod-network-cidr={{ k8s_pod_network_cidr }} --apiserver-cert-extra-sans {% for host in groups [ 'k8s_master' ] %}{{ host }}.{{ domain }}{% if not loop.last %},{% endif %}{% endfor %} --service-dns-domain k8s.{{ domain }}
      register: k8s_init_first_master
      no_log: '{{ nolog }}'

    - debug:
        msg: '{{ k8s_init_first_master.stdout }}'
      no_log: '{{ nolog }}'

    - include: symlink.yml

    - name: install flannel
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

  any_errors_fatal: true
  when:
    - inventory_hostname == k8s_master_node
    - not k8s_check_initialized.stat.exists


- block:

    - name: get join command
      shell: kubeadm token create --print-join-command
      register: k8s_get_join_command

    - debug:
        msg: '{{ k8s_get_join_command.stdout }}'

    - name: set k8s_join_command
      set_fact:
        k8s_join_command: '{{ k8s_get_join_command.stdout }}'

    - name: get master ca.crt
      slurp:
        src: /etc/kubernetes/pki/ca.crt
      register: k8s_get_master_ca_crt

    - name: set k8s_get_master_ca_crt
      set_fact:
        k8s_master_ca_crt: "{{ k8s_get_master_ca_crt [ 'content' ] | b64decode }}"

    - name: get master ca.key
      slurp:
        src: /etc/kubernetes/pki/ca.key
      register: k8s_get_master_ca_key

    - name: set k8s_get_master_ca_key
      set_fact:
        k8s_master_ca_key: "{{ k8s_get_master_ca_key [ 'content' ] | b64decode }}"

    - name: get master sa.key
      slurp:
        src: /etc/kubernetes/pki/sa.key
      register: k8s_get_master_sa_key

    - name: set k8s_get_master_sa_key
      set_fact:
        k8s_master_sa_key: "{{ k8s_get_master_sa_key [ 'content' ] | b64decode }}"

    - name: get master sa.pub
      slurp:
        src: /etc/kubernetes/pki/sa.pub
      register: k8s_get_master_sa_pub

    - name: set k8s_get_master_sa_pub
      set_fact:
        k8s_master_sa_pub: "{{ k8s_get_master_sa_pub [ 'content' ] | b64decode }}"

    - name: get master front-proxy-ca.crt
      slurp:
        src: /etc/kubernetes/pki/front-proxy-ca.crt
      register: k8s_get_front_proxy_ca_crt

    - name: set k8s_master_front_proxy_ca_crt
      set_fact:
        k8s_master_front_proxy_ca_crt: "{{ k8s_get_front_proxy_ca_crt [ 'content' ] | b64decode }}"

    - name: get master /etcd/ca.crt
      slurp:
        src: /etc/kubernetes/pki/etcd/ca.crt
      register: k8s_get_etcd_ca_crt

    - name: set k8s_master_etcd_ca_crt
      set_fact:
        k8s_master_etcd_ca_crt: "{{ k8s_get_etcd_ca_crt [ 'content' ] | b64decode }}"

    - name: get master /etcd/ca.key
      slurp:
        src: /etc/kubernetes/pki/etcd/ca.key
      register: k8s_get_etcd_ca_key

    - name: set k8s_master_etcd_ca_key
      set_fact:
        k8s_master_etcd_ca_key: "{{ k8s_get_etcd_ca_key [ 'content' ] | b64decode }}"

    - name: get master front-proxy-ca.key
      slurp:
        src: /etc/kubernetes/pki/front-proxy-ca.key
      register: k8s_get_front_proxy_ca_key

    - name: set k8s_master_front_proxy_ca_key
      set_fact:
        k8s_master_front_proxy_ca_key: "{{ k8s_get_front_proxy_ca_key [ 'content' ] | b64decode }}"

  no_log: '{{ nolog }}'
  when: inventory_hostname == k8s_master_node


- block:

    - name: mkdir certs
      file:
        path: '{{ item }}'
        state: directory
      loop:
        - /etc/kubernetes/pki
        - /etc/kubernetes/pki/etcd

    - name: create master certs
      copy:
        content: '{{ item.content }}'
        dest: '{{ item.dest }}'
      loop:
        - { content: "{{ hostvars [ k8s_master_node ] [ 'k8s_master_ca_crt' ] }}",             dest: /etc/kubernetes/pki/ca.crt             }
        - { content: "{{ hostvars [ k8s_master_node ] [ 'k8s_master_ca_key' ] }}",             dest: /etc/kubernetes/pki/ca.key             }
        - { content: "{{ hostvars [ k8s_master_node ] [ 'k8s_master_sa_key' ] }}",             dest: /etc/kubernetes/pki/sa.key             }
        - { content: "{{ hostvars [ k8s_master_node ] [ 'k8s_master_sa_pub' ] }}",             dest: /etc/kubernetes/pki/sa.pub             }
        - { content: "{{ hostvars [ k8s_master_node ] [ 'k8s_master_front_proxy_ca_crt' ] }}", dest: /etc/kubernetes/pki/front-proxy-ca.crt }
        - { content: "{{ hostvars [ k8s_master_node ] [ 'k8s_master_front_proxy_ca_key' ] }}", dest: /etc/kubernetes/pki/front-proxy-ca.key }
        - { content: "{{ hostvars [ k8s_master_node ] [ 'k8s_master_etcd_ca_crt' ] }}",        dest: /etc/kubernetes/pki/etcd/ca.crt        }
        - { content: "{{ hostvars [ k8s_master_node ] [ 'k8s_master_etcd_ca_key' ] }}",        dest: /etc/kubernetes/pki/etcd/ca.key        }

    - name: init masters
      shell: "{{ hostvars [ k8s_master_node ] [ 'k8s_join_command' ] }} --control-plane"
      no_log: '{{ nolog }}'
      register: k8s_init_masters

  any_errors_fatal: true
  when:
    - inventory_hostname != k8s_master_node
    - inventory_hostname in groups ['k8s_master']
    - not k8s_check_initialized.stat.exists


- block:

    - name: update etcd config
      lineinfile:
        path: /etc/kubernetes/manifests/etcd.yaml
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
        insertafter: '- etcd'
      loop:
        - { regexp: 'initial-cluster=',       line: "    - --initial-cluster={% for host in groups [ 'k8s_master' ] %}https://{{ host }}.{{ domain }}:8380{% if not loop.last %},{% endif %}{% endfor %}" }
        - { regexp: 'initial-cluster-state=', line: "    - --initial-cluster-state=existing" }

    - name: cronjob to renew certs
      cron:
        name: renew k8s certs
        month: 6,12
        day: 1
        hour: 0
        minute: 0
        job: kubeadm alpha certs renew all

  when:
    - inventory_hostname in groups ['k8s_master']
    - not k8s_check_initialized.stat.exists


- name: init workers
  shell: "{{ hostvars [ k8s_master_node ] [ 'k8s_join_command' ] }}"
  no_log: '{{ nolog }}'
  register: k8s_init_workers
  when:
    - inventory_hostname in groups ['k8s_worker']
    - not k8s_check_initialized.stat.exists
